<script setup>
import { CheckIcon, XMarkIcon } from "@heroicons/vue/24/outline";
import { computed, onMounted, onUnmounted, ref, watch, nextTick } from "vue";
import { cva } from "class-variance-authority";
import Fuse from "fuse.js";
import { useFloating } from "@floating-ui/vue";

const props = defineProps({
  label: {
    type: String,
    required: true,
  },
  type: String,
  name: String,
  autocomplete: String,
  leftIcon: {
    type: [Object, Function],
  },
  borderStyle: {
    type: String,
    validator: (val) =>
      ["bordered", "border-bottom", "no-border"].includes(val),
    default: "bordered",
  },
  search: { type: Object, default: { items: [], keys: [] } },
  onValidityChange: {
    type: Function,
    default: () => {},
  },
  disabled: Boolean,
});

// Initialize reactive references for various state variables.
const inputTextValue = ref("");
const inputSelectArray = ref([]);
const isInputValid = ref(false);
const inputFieldType = ref(props.type);
const isLabelFloating = ref(false);
const inputElementRef = ref(null);
const searchElementRef = ref(null);
const containerElementRef = ref(null);
const isSearchVisible = ref(false);
const fuseSearchInstance = ref(null);

const { floatingStyles } = useFloating(containerElementRef, searchElementRef, {
  placement: "bottom",
});

const selectTextValue = computed(() => {
  const inputTextArray = inputTextValue.value.split(",");
  const lastValue = inputTextArray[inputTextArray.length - 1];
  return inputSelectArray.value.includes(lastValue) ? "" : lastValue;
});

// On component mount, initialize the Fuse instance and set up a click event listener.
onMounted(() => {
  if (props.search.items !== []) {
    fuseSearchInstance.value = new Fuse(props.search.items, {
      threshold: 0.1,
      includeScore: true,
    });
  }
  document.addEventListener("mousedown", handleOutsideClick);
});

// On component unmount, remove the mousedown event listener.
onUnmounted(() => {
  document.removeEventListener("mousedown", handleOutsideClick);
});

// Function to handle clicks outside of the search element.
const handleOutsideClick = (event) => {
  const searchElement = containerElementRef.value;
  if (!searchElement.contains(event.target)) {
    isSearchVisible.value = false;
  }
};

// Watcher for inputTextValue, to update search visibility and input validity.
watch(
  () => inputTextValue.value,
  (_1, _2) => {
    isSearchVisible.value === true;
    inputTextValue.value = inputTextValue.value.replace(/,,/, () => {
      inputSelectArray.value = inputTextValue.value.split(",");
      return ",";
    });
  }
);

const selectItems = (selection) => {
  inputSelectArray.value.push(selection);
  inputTextValue.value = inputSelectArray.value.join(",");
  inputTextValue.value += ",";
  inputElementRef.value.focus();
};

// Watcher for isInputValid, to trigger onValidityChange prop.
watch(
  () => isInputValid.value,
  (newValue, _1) => {
    props.onValidityChange(newValue);
  }
);

// Global variable for maxResults
const maxResults = props.search.maxResults || 5;

function replaceSpecialCharacters(str) {
  return str
    .replace(/[ăâ]/g, "a")
    .replace(/[ț]/g, "t")
    .replace(/[ș]/g, "s")
    .replace(/[î]/g, "i");
}

const splitResult = (item, query) => {
  const lowerCaseItemName = replaceSpecialCharacters(item.toLowerCase());
  const lowerCaseQuery = replaceSpecialCharacters(query.toLowerCase());
  const index = lowerCaseItemName.indexOf(lowerCaseQuery);
  if (index === -1) {
    return { beforeMatch: item, match: "", afterMatch: "" };
  }
  const beforeMatch = item.slice(0, index);
  const match = item.slice(index, index + query.length);
  const afterMatch = item.slice(index + query.length);
  return { beforeMatch, match, afterMatch };
};

// Computed property for searchResults
const searchResults = computed(() => {
  if (!fuseSearchInstance) return [];
  let results = selectTextValue.value
    ? fuseSearchInstance.value.search(selectTextValue.value)
    : [];

  // If the results length exceeds maxResults, only return up to maxResults
  if (results.length > maxResults) {
    results = results.slice(0, maxResults);
  }

  const resultsWithSplit = results.map((item) => {
    return {
      ...item,
      splitResult: splitResult(item.item, selectTextValue.value),
    };
  });
  return resultsWithSplit;
});

// Generate a unique id for the input element.
const uniqueInputId = computed(() => props.name + "-" + crypto.randomUUID());

// Compute classes for the input based on the borderStyle and disabled props.
const inputClass = computed(() =>
  cva("tracking-wider caret-gray-700 outline-none w-full text-md px-12", {
    variants: {
      borderStyle: {
        bordered: "border-2 rounded-sm py-3",
        "border-bottom": "border-b-2 py-3",
        "no-border": "py-3",
      },
      disabled: {
        true: "!bg-gray-100 !text-gray-400 !cursor-not-allowed ",
      },
    },
  })({ borderStyle: props.borderStyle, disabled: props.disabled })
);

// Compute the aria label for the input.
const inputAriaLabel = computed(() => {
  return (props.name ? props.name : props.type) + " input";
});

// Determine the autocomplete value for the input.
// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofilling-form-controls:-the-autocomplete-attribute
const autocompleteAttribute = computed(() =>
  props.autocomplete ? props.autocomplete : props.name
);

// Functions to handle focus, blur and reset actions on the input.
const handleInputFocus = () => {
  if (inputTextValue.value === "")
    isLabelFloating.value = !isLabelFloating.value;
  isSearchVisible.value = true;
};
const handleInputBlur = () => {
  if (inputTextValue.value === "")
    isLabelFloating.value = !isLabelFloating.value;
};
const resetInputField = () => {
  inputTextValue.value = "";
  isLabelFloating.value = false;
  isSearchVisible.value = false;
};
const resetInputOnEscape = () => {
  inputTextValue.value = "";
  isLabelFloating.value = true;
};
</script>

<template>
  <div
    ref="containerElementRef"
    class="tracking-wider flex flex-col items-center relative text-gray-700 w-full min-h-[2em]"
  >
    <!-- Left Icon -->

    <div
      v-if="props.leftIcon"
      class="absolute left-0 ml-2 h-full w-8 flex items-center justify-center"
      aria-hidden="true"
    >
      <component
        class="absolute left-0 h-8 p-1 text-gray-900 pointer-events-none select-none"
        :is="props.leftIcon"
      />
    </div>

    <!-- Input -->
    <input
      :class="inputClass"
      :type="inputFieldType"
      :name="props.name"
      :autocomplete="autocompleteAttribute"
      :id="uniqueInputId"
      v-model="inputTextValue"
      :disabled="props.disabled"
      :aria-label="inputAriaLabel"
      :aria-invalid="props.error ? true : false"
      :aria-errormessage="props.error ? props.error : null"
      :aria-labelledby="`${uniqueInputId}-label`"
      @focus="handleInputFocus"
      @blur="handleInputBlur"
      @keydown.escape="resetInputOnEscape"
      ref="inputElementRef"
    />

    <!-- Floating Label -->
    <div
      class="absolute right-0 h-full w-full flex items-center justify-center pointer-events-none"
    >
      <span
        class="absolute left-12 transition-all duration-300 pointer-events-none text-md text-gray-700/80 select-none"
        :class="
          isLabelFloating
            ? 'transform -translate-y-4 text-xs'
            : 'transform-none'
        "
        :id="`${uniqueInputId}-label`"
        >{{ props.label }}</span
      >
    </div>

    <!-- Search Result -->
    <Transition
      enter-from-class="scale-90 opacity-0"
      enter-active-class="transition duration-200"
      enter-to-class="scale-100 opacity-100"
      leave-from-class="scale-100 opacity-100"
      leave-active-class="transition duration-200"
      leave-to-class="scale-90 opacity-0"
      mode="out-in"
    >
      <div
        ref="searchElementRef"
        v-if="
          searchResults &&
          searchResults != [] &&
          searchResults.length > 0 &&
          isSearchVisible
        "
        @mousedown.prevent
        class="absolute top-0 left-0 origin-top w-full overflow-y-auto max-h-[25em] z-10 bg-white flex flex-col items-center border-2 rounded-b-md"
        :style="floatingStyles"
      >
        <component
          is="button"
          class="border-b-2 w-full py-2 text-center"
          v-for="searchItem in searchResults"
          :key="searchItem.item.refIndex"
          @mousedown.prevent
          @click="selectItems(searchItem.item)"
        >
          <template v-if="searchItem.splitResult.beforeMatch">
            {{ searchItem.splitResult.beforeMatch }}
          </template>
          <span class="text-blue-500">
            {{ searchItem.splitResult.match }}
          </span>
          <template v-if="searchItem.splitResult.afterMatch">
            {{ searchItem.splitResult.afterMatch }}
          </template>
          <span class="text-sm text-gray-400" v-if="searchItem.item.comuna">
            {{ ` aparține de ${searchItem.item.comuna}` }}</span
          >
        </component>
      </div>
    </Transition>

    <!-- Clear icon -->
    <TransitionGroup
      enter-from-class="scale-90 opacity-0"
      enter-active-class="transition-all duration-200"
      enter-to-class="scale-100 opacity-100"
      leave-from-class="scale-100 opacity-100"
      leave-active-class="transition-all duration-200"
      leave-to-class="scale-90 opacity-0"
    >
      <button
        v-if="inputTextValue !== '' && !isInputValid"
        class="absolute right-0 mr-2 h-full w-8 flex items-center justify-center"
        @click="resetInputField"
        aria-label="Clear input"
      >
        <component
          class="absolute right-0 h-8 p-1 text-gray-900 cursor-pointer hover:scale-110 transition-all duration-300 select-none"
          :is="XMarkIcon"
        />
      </button>
      <!-- Check icon -->
      <div
        v-if="isInputValid"
        class="absolute right-0 mr-2 h-full w-8 flex items-center justify-center pointer-events-none"
        aria-label="Clear input"
      >
        <component
          class="absolute right-0 h-8 p-1 text-green-600 cursor-pointer hover:scale-110 transition-all duration-300 select-none"
          :is="CheckIcon"
        />
      </div>
    </TransitionGroup>
  </div>
</template>

<style scoped></style>
